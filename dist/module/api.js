import card from './card';
import { getCookie, setCookie } from './cookie';
import { setOptions, toCamel, toSnake, trimBoth, trimStart, trimEnd, stringifyQuery, base64Encode, } from './utils';
import cache from './cache';
import cart from './cart';
import account from './account';
import products from './products';
import categories from './categories';
import attributes from './attributes';
import subscriptions from './subscriptions';
import content from './content';
import settings from './settings';
import payment from './payment';
import locale from './locale';
import currency from './currency';
import 'isomorphic-fetch';
const options = {
    key: '',
    store: '',
    url: '',
    vaultUrl: '',
    timeout: 0,
    useCamelCase: false,
    previewContent: false,
    session: {},
    locale: '',
    currency: '',
    api: {},
};
const api = {
    options,
    request,
    init(store, key, opt) {
        options.key = key;
        options.store = store;
        options.url = opt.url ? trimEnd(opt.url) : `https://${store}.swell.store`;
        options.vaultUrl = opt.vaultUrl ? trimEnd(opt.vaultUrl) : `https://vault.schema.io`;
        if (Number.isNaN(opt.timeout)) {
            options.timeout = opt.timeout ? parseInt(String(opt.timeout), 10) : 20000;
        }
        else {
            options.timeout = opt.timeout;
        }
        options.useCamelCase = opt.useCamelCase || false;
        options.previewContent = opt.previewContent || false;
        options.session = opt.session;
        options.locale = opt.locale;
        options.currency = opt.currency;
        options.api = api;
        setOptions(options);
    },
    // Backward compatibility
    auth(...args) {
        return this.init(...args);
    },
    get(url, query) {
        return request('get', url, query);
    },
    put(url, data) {
        return request('put', url, data);
    },
    post(url, data) {
        return request('post', url, data);
    },
    delete(url, data) {
        return request('delete', url, data);
    },
    cache,
    card,
    cart: cart.methods(request, options),
    account: account.methods(request, options),
    products: products.methods(request, options),
    categories: categories.methods(request, options),
    attributes: attributes.methods(request, options),
    subscriptions: subscriptions.methods(request, options),
    content: content.methods(request, options),
    settings: settings.methods(request, options),
    payment: payment.methods(request, options),
    locale: locale.methods(request, options),
    currency: currency.methods(request, options),
};
async function request(method, url, id = undefined, data = undefined, opt = undefined) {
    const reqMethod = String(method).toLowerCase();
    let reqUrl = url;
    let reqData = id;
    if (data !== undefined || typeof id === 'string') {
        reqUrl = [trimEnd(url), trimStart(id)].join('/');
        reqData = data;
    }
    const allOptions = {
        ...options,
        ...opt,
    };
    const baseUrl = `${allOptions.url}${allOptions.base || ''}/api`;
    reqUrl = allOptions.fullUrl || `${baseUrl}/${trimBoth(reqUrl)}`;
    reqData = allOptions.useCamelCase ? toSnake(reqData) : reqData;
    let reqBody;
    if (reqMethod === 'get') {
        let exQuery;
        [reqUrl, exQuery] = reqUrl.split('?');
        const fullQuery = [exQuery, stringifyQuery(reqData)].join('&').replace(/^&/, '');
        reqUrl = `${reqUrl}${fullQuery ? `?${fullQuery}` : ''}`;
    }
    else {
        reqBody = JSON.stringify(reqData);
    }
    const session = allOptions.session || getCookie('swell-session');
    const locale = allOptions.locale || getCookie('swell-locale');
    const currency = allOptions.currency || getCookie('swell-currency');
    const reqHeaders = {
        'Content-Type': 'application/json',
        Authorization: `Basic ${base64Encode(String(allOptions.key))}`,
        ...(session ? { 'X-Session': session } : {}),
        ...(locale ? { 'X-Locale': locale } : {}),
        ...(currency ? { 'X-Currency': currency } : {}),
    };
    const response = await fetch(reqUrl, {
        method: reqMethod,
        headers: reqHeaders,
        body: reqBody,
        credentials: 'include',
        mode: 'cors',
    });
    const responseSession = response.headers.get('X-Session');
    if (typeof responseSession === 'string' && session !== responseSession) {
        setCookie('swell-session', responseSession);
    }
    const result = await response.json();
    if (result && result.error) {
        const err = new Error(result.error.message);
        err.status = response.status;
        err.code = result.error.code;
        err.param = result.error.param;
        throw err;
    }
    else if (!response.ok) {
        const err = new Error('A connection error occurred while making the request');
        err.code = 'connection_error';
        throw err;
    }
    return options.useCamelCase ? toCamel(result) : result;
}
if (typeof window !== 'undefined') {
    window.swell = {
        version: '@VERSION@',
    };
}
export default api;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFDMUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDaEQsT0FBTyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1AsT0FBTyxFQUNQLFFBQVEsRUFDUixTQUFTLEVBQ1QsT0FBTyxFQUNQLGNBQWMsRUFDZCxZQUFZLEdBQ2IsTUFBTSxTQUFTLENBQUM7QUFDakIsT0FBTyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQzVCLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMxQixPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxRQUFRLE1BQU0sWUFBWSxDQUFDO0FBQ2xDLE9BQU8sVUFBVSxNQUFNLGNBQWMsQ0FBQztBQUN0QyxPQUFPLFVBQVUsTUFBTSxjQUFjLENBQUM7QUFDdEMsT0FBTyxhQUFhLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sUUFBUSxNQUFNLFlBQVksQ0FBQztBQUNsQyxPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sUUFBUSxNQUFNLFlBQVksQ0FBQztBQUVsQyxPQUFPLGtCQUFrQixDQUFDO0FBa0IxQixNQUFNLE9BQU8sR0FBWTtJQUN2QixHQUFHLEVBQUUsRUFBRTtJQUNQLEtBQUssRUFBRSxFQUFFO0lBQ1QsR0FBRyxFQUFFLEVBQUU7SUFDUCxRQUFRLEVBQUUsRUFBRTtJQUNaLE9BQU8sRUFBRSxDQUFDO0lBQ1YsWUFBWSxFQUFFLEtBQUs7SUFDbkIsY0FBYyxFQUFFLEtBQUs7SUFDckIsT0FBTyxFQUFFLEVBQUU7SUFDWCxNQUFNLEVBQUUsRUFBRTtJQUNWLFFB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