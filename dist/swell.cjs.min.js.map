{"version":3,"file":"swell.cjs.min.js","sources":["../src/utils/index.js","../src/card.js","../src/cookie.js","../src/cache.js","../src/attributes.js","../src/products.js","../src/cart.js","../src/account.js","../src/categories.js","../src/subscriptions.js","../src/content.js","../src/settings.js","../src/utils/stripe.js","../src/utils/quickpay.js","../src/utils/paysafecard.js","../src/utils/klarna.js","../src/payment.js","../src/locale.js","../src/currency.js","../src/api.js"],"sourcesContent":["import { stringify } from 'qs';\nimport set from 'lodash/set';\nimport get from 'lodash/get';\nimport uniq from 'lodash/uniq';\nimport find from 'lodash/find';\nimport round from 'lodash/round';\nimport findIndex from 'lodash/findIndex';\nimport camelCase from 'lodash/camelCase';\nimport snakeCase from 'lodash/snakeCase';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport deepmerge from 'deepmerge';\nimport { normalizeKeys } from 'object-keys-normalizer';\n\nlet options = {};\n\nfunction merge(x, y, opt = {}) {\n  if (!y || typeof y !== 'object') {\n    return x;\n  }\n  if (!x || typeof x !== 'object') {\n    return x;\n  }\n  function arrayMerge(target, source, options) {\n    const destination = target.slice();\n    source.forEach((item, index) => {\n      if (typeof destination[index] === 'undefined') {\n        destination[index] = options.cloneUnlessOtherwiseSpecified(\n          item,\n          options,\n        );\n      } else if (options.isMergeableObject(item)) {\n        destination[index] = merge(target[index], item, options);\n      } else if (target.indexOf(item) === -1) {\n        destination.push(item);\n      }\n    });\n    return destination;\n  }\n  return deepmerge(x, y, {\n    arrayMerge,\n  });\n}\n\nfunction setOptions(optns) {\n  options = optns;\n}\n\nfunction getOptions() {\n  return options;\n}\n\nfunction isObject(val) {\n  return val && typeof val === 'object' && !(val instanceof Array);\n}\n\nfunction toCamel(obj) {\n  if (!obj) return obj;\n  const objCopy = JSON.parse(JSON.stringify(obj));\n  return normalizeKeys(objCopy, keyToCamel);\n}\n\nfunction toCamelPath(str) {\n  if (typeof str === 'string') {\n    return str.split('.').map(camelCase).join('.');\n  }\n  return str;\n}\n\nfunction toSnake(obj) {\n  if (!obj) return obj;\n  const objCopy = JSON.parse(JSON.stringify(obj));\n  return normalizeKeys(objCopy, keyToSnake);\n}\n\nfunction keyToSnake(key) {\n  // Handle keys prefixed with $ or _\n  return (\n    (key[0] === '$' ? '$' : '') + snakeCase(key).replace(/\\_([0-9])/g, '$1')\n  );\n}\n\nfunction keyToCamel(key) {\n  // Handle keys prefixed with $ or _\n  return (\n    (key[0] === '$' ? '$' : '') + camelCase(key).replace(/\\_([0-9])/g, '$1')\n  );\n}\n\nfunction trimBoth(str) {\n  return trimStart(trimEnd(str));\n}\n\nfunction trimStart(str) {\n  return typeof str === 'string' ? str.replace(/^[/]+/, '') : '';\n}\n\nfunction trimEnd(str) {\n  return typeof str === 'string' ? str.replace(/[/]+$/, '') : '';\n}\n\nfunction stringifyQuery(str) {\n  return stringify(str);\n}\n\nfunction map(arr, cb) {\n  return arr instanceof Array ? arr.map(cb) : [];\n}\n\nfunction reduce(arr, cb, init) {\n  return arr instanceof Array ? arr.reduce(cb, init) : init;\n}\n\nfunction isServer() {\n  return !(typeof window !== 'undefined' && window && window.document);\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function';\n}\n\nfunction defaultMethods(request, uri, methods) {\n  return {\n    list:\n      methods.indexOf('list') >= 0\n        ? function (query) {\n            return request('get', uri, undefined, query);\n          }\n        : undefined,\n\n    get:\n      methods.indexOf('get') >= 0\n        ? function (id, query) {\n            return request('get', uri, id, query);\n          }\n        : undefined,\n  };\n}\n\nasync function vaultRequest(method, url, data, opt = undefined) {\n  const vaultUrl = options.vaultUrl;\n  const timeout = options.timeout;\n  const requestId = vaultRequestId();\n  const callback = `swell_vault_response_${requestId}`;\n\n  data = {\n    $jsonp: {\n      method,\n      callback,\n    },\n    $data: data,\n    $key: options.key,\n  };\n\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = `${trimEnd(vaultUrl)}/${trimStart(url)}?${serializeData(\n      data,\n    )}`;\n\n    const errorTimeout = setTimeout(() => {\n      window[callback]({\n        $error: `Request timed out after ${timeout / 1000} seconds`,\n        $status: 500,\n      });\n    }, timeout);\n\n    window[callback] = (result) => {\n      clearTimeout(errorTimeout);\n      if (result && result.$error) {\n        const err = new Error(result.$error);\n        err.code = 'request_error';\n        err.status = result.$status;\n        reject(err);\n      } else if (!result || result.$status >= 300) {\n        const err = new Error(\n          'A connection error occurred while making the request',\n        );\n        err.code = 'connection_error';\n        err.status = result.$status;\n        reject(err);\n      } else {\n        resolve(options.useCamelCase ? toCamel(result.$data) : result.$data);\n      }\n      delete window[callback];\n      script.parentNode.removeChild(script);\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n}\n\nfunction vaultRequestId() {\n  window.__swell_vault_request_id = window.__swell_vault_request_id || 0;\n  window.__swell_vault_request_id++;\n  return window.__swell_vault_request_id;\n}\n\nfunction serializeData(data) {\n  let key;\n  const s = [];\n  const add = function (key, value) {\n    // If value is a function, invoke it and return its value\n    if (typeof value === 'function') {\n      value = value();\n    } else if (value == null) {\n      value = '';\n    }\n    s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);\n  };\n  for (const key in data) {\n    buildParams(key, data[key], add);\n  }\n  return s.join('&').replace(' ', '+');\n}\nconst rbracket = /\\[\\]$/;\nfunction buildParams(key, obj, add) {\n  let name;\n  if (obj instanceof Array) {\n    for (let i = 0; i < obj.length; i++) {\n      if (rbracket.test(key)) {\n        // Treat each array item as a scalar.\n        add(key, v);\n      } else {\n        // Item is non-scalar (array or object), encode its numeric index.\n        buildParams(\n          key + '[' + (typeof v === 'object' && v != null ? i : '') + ']',\n          v,\n          add,\n        );\n      }\n    }\n  } else if (obj && typeof obj === 'object') {\n    // Serialize object item.\n    for (name in obj) {\n      buildParams(key + '[' + name + ']', obj[name], add);\n    }\n  } else {\n    // Serialize scalar item.\n    add(key, obj);\n  }\n}\n\nfunction base64Encode(string) {\n  if (typeof btoa !== 'undefined') {\n    return btoa(string);\n  }\n  return Buffer.from(string).toString('base64');\n}\n\nfunction getLocationParams(location) {\n  const url = location.search;\n  const query = url.substr(1);\n  const result = {};\n  query.split('&').forEach(function (part) {\n    const item = part.split('=');\n    result[item[0]] = decodeURIComponent(item[1]);\n  });\n  return result;\n}\n\nfunction removeUrlParams() {\n  const url = window.location.origin + window.location.pathname;\n  window.history.pushState({ path: url }, '', url);\n}\n\nexport {\n  defaultMethods,\n  set,\n  get,\n  uniq,\n  find,\n  round,\n  findIndex,\n  camelCase,\n  cloneDeep,\n  merge,\n  setOptions,\n  getOptions,\n  toCamel,\n  toCamelPath,\n  toSnake,\n  trimBoth,\n  trimStart,\n  trimEnd,\n  stringifyQuery,\n  isServer,\n  isFunction,\n  isObject,\n  isEqual,\n  snakeCase,\n  map,\n  reduce,\n  base64Encode,\n  vaultRequest,\n  getLocationParams,\n  removeUrlParams,\n};\n","import { vaultRequest, toSnake } from './utils';\n\nconst cardApi = {\n  async createToken(data) {\n    let error = null;\n    let code = null;\n    let param = null;\n    if (!data) {\n      error = 'Card details are missing in `swell.card.createToken(card)`';\n      param = '';\n    }\n    const card = toSnake(data);\n    if (!card.nonce) {\n      if (!this.validateNumber(card.number)) {\n        error = 'Card number appears to be invalid';\n        code = 'invalid_card_number';\n        param = 'number';\n      }\n      if (card.exp) {\n        const exp = this.expiry(card.exp);\n        card.exp_month = exp.month;\n        card.exp_year = exp.year;\n      }\n      if (!this.validateExpiry(card.exp_month, card.exp_year)) {\n        error = 'Card expiry appears to be invalid';\n        code = 'invalid_card_expiry';\n        param = 'exp_month';\n      }\n      if (!this.validateCVC(card.cvc)) {\n        error = 'Card CVC code appears to be invalid';\n        code = 'invalid_card_cvc';\n        param = 'exp_cvc';\n      }\n    }\n\n    if (error) {\n      const err = new Error(error);\n      err.code = code || 'invalid_card';\n      err.status = 402;\n      err.param = param;\n      throw err;\n    }\n\n    // Get a token from the vault\n    const result = await vaultRequest('post', '/tokens', card);\n    if (result.errors) {\n      const param = Object.keys(result.errors)[0];\n      const err = new Error(result.errors[param].message || 'Unknown error');\n      err.code = 'vault_error';\n      err.status = 402;\n      err.param = param;\n      throw err;\n    }\n    return result;\n  },\n\n  expiry(value) {\n    if (value && value.month && value.year) {\n      return value;\n    }\n\n    const parts = new String(value).split(/[\\s\\/\\-]+/, 2);\n    const month = parts[0];\n    let year = parts[1];\n\n    // Convert 2 digit year\n    if (year && year.length === 2 && /^\\d+$/.test(year)) {\n      const prefix = new Date().getFullYear().toString().substring(0, 2);\n      year = prefix + year;\n    }\n\n    return {\n      month: ~~month,\n      year: ~~year,\n    };\n  },\n\n  types() {\n    let e, t, n, r;\n    t = {};\n    for (e = n = 40; n <= 49; e = ++n) t[e] = 'Visa';\n    for (e = r = 50; r <= 59; e = ++r) t[e] = 'MasterCard';\n    return (\n      (t[34] = t[37] = 'American Express'),\n      (t[60] = t[62] = t[64] = t[65] = 'Discover'),\n      (t[35] = 'JCB'),\n      (t[30] = t[36] = t[38] = t[39] = 'Diners Club'),\n      t\n    );\n  },\n\n  type(num) {\n    return this.types()[num.slice(0, 2)] || 'Unknown';\n  },\n\n  luhnCheck(num) {\n    let t, n, r, i, s, o;\n    (r = !0), (i = 0), (n = (num + '').split('').reverse());\n    for (s = 0, o = n.length; s < o; s++) {\n      (t = n[s]), (t = parseInt(t, 10));\n      if ((r = !r)) t *= 2;\n      t > 9 && (t -= 9), (i += t);\n    }\n    return i % 10 === 0;\n  },\n\n  validateNumber(num) {\n    return (\n      (num = (num + '').replace(/\\s+|-/g, '')),\n      num.length >= 10 && num.length <= 16 && this.luhnCheck(num)\n    );\n  },\n\n  validateExpiry(month, year) {\n    let r, i;\n    return (\n      (month = String(month).trim()),\n      (year = String(year).trim()),\n      /^\\d+$/.test(month)\n        ? /^\\d+$/.test(year)\n          ? parseInt(month, 10) <= 12\n            ? ((i = new Date(year, month)),\n              (r = new Date()),\n              i.setMonth(i.getMonth() - 1),\n              i.setMonth(i.getMonth() + 1, 1),\n              i > r)\n            : !1\n          : !1\n        : !1\n    );\n  },\n\n  validateCVC(val) {\n    return (\n      (val = String(val).trim()),\n      /^\\d+$/.test(val) && val.length >= 3 && val.length <= 4\n    );\n  },\n};\n\nexport default cardApi;\n","import { isServer } from './utils';\n\nconst COOKIE_MAX_AGE = 604800; // 1 week\n\nfunction getCookie(name) {\n  if (isServer()) {\n    return undefined;\n  }\n\n  const matches = document.cookie.match(\n    new RegExp(\n      '(?:^|; )' + name.replace(/([.$?*|{}()[]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)',\n    ),\n  );\n  return matches ? decodeURIComponent(matches[1]) : undefined;\n}\n\nfunction setCookie(name, value, options = {}) {\n  if (isServer()) {\n    return;\n  }\n\n  // default cookie options, which can be overridden\n  options = {\n    path: '/',\n    'max-age': COOKIE_MAX_AGE,\n    samesite: 'lax',\n    ...options,\n  };\n\n  if (options.expires && options.expires.toUTCString) {\n    options.expires = options.expires.toUTCString();\n  }\n\n  let updatedCookie =\n    encodeURIComponent(name) + '=' + encodeURIComponent(value);\n\n  for (const optionKey in options) {\n    updatedCookie += '; ' + optionKey;\n    const optionValue = options[optionKey];\n\n    if (optionValue !== true) {\n      updatedCookie += '=' + optionValue;\n    }\n  }\n\n  document.cookie = updatedCookie;\n}\n\nexport { getCookie, setCookie };\n","import { get, set, merge, toCamel, toCamelPath, getOptions } from './utils';\n\nconst RECORD_TIMEOUT = 5000;\n\nlet VALUES = {\n  /*\n  [model]: {\n    [id]: {\n      data,\n      record,\n      recordTimer,\n      presets,\n    }\n  }\n*/\n};\n\nconst cacheApi = {\n  options: {\n    enabled: true,\n    debug: false,\n  },\n\n  debug(...args) {\n    if (this.options.debug) {\n      console.log(...args);\n    }\n  },\n\n  values({ model, id }, setValues = undefined) {\n    this.debug('cache.values', ...arguments);\n    if (setValues !== undefined) {\n      for (let key in setValues) {\n        set(VALUES, `${model}.${id}.${key}`, setValues[key]);\n      }\n      return;\n    }\n    return get(VALUES, `${model}.${id}`, {});\n  },\n\n  preset(details) {\n    this.debug('cache.preset', ...arguments);\n    const { presets = [] } = this.values(details);\n    presets.push(details);\n    this.values(details, { presets });\n  },\n\n  set(details) {\n    this.debug('cache.set', ...arguments);\n    let { model, id, path, value } = details;\n    let { data = {}, record, presets } = this.values(details);\n\n    if (id === null) {\n      return;\n    }\n\n    if (record === undefined) {\n      return this.preset(details);\n    }\n\n    data = merge(record || {}, data);\n\n    const { useCamelCase } = getOptions();\n    if (useCamelCase && value && typeof value === 'object') {\n      value = toCamel(value);\n    }\n\n    if (path || value instanceof Array) {\n      let upData = { ...(data || {}) };\n      let upPath = useCamelCase ? toCamelPath(path) : path;\n      set(upData, upPath || '', value);\n      data = upData;\n    } else if (value && typeof value === 'object') {\n      data = data || {};\n      data = merge(data, value);\n    } else {\n      data = value;\n    }\n\n    this.values(details, { data });\n\n    try {\n      // Make sure values have clean refs\n      const cache = VALUES[model][id];\n      if (cache !== undefined) {\n        if (cache.data !== undefined) {\n          cache.data = JSON.parse(JSON.stringify(cache.data));\n        }\n        if (cache.record !== undefined) {\n          cache.record = JSON.parse(JSON.stringify(cache.record));\n        }\n      }\n    } catch (err) {\n      // noop\n    }\n  },\n\n  get(model, id) {\n    this.debug('cache.get', ...arguments);\n    const { data, recordTimer } = this.values({ model, id });\n    this.debug('cache.get:data+recordTimer', ...arguments);\n    if (recordTimer) {\n      return data;\n    }\n  },\n\n  setRecord(record, details) {\n    this.debug('cache.setRecord', ...arguments);\n    let { recordTimer, presets } = this.values(details);\n\n    if (recordTimer) {\n      clearTimeout(recordTimer);\n    }\n\n    recordTimer = setTimeout(() => {\n      this.values(details, { record: undefined, recordTimer: undefined });\n    }, RECORD_TIMEOUT);\n\n    // Record has to be null at minimum, not undefined\n    this.values(details, {\n      record: record !== undefined ? record : null,\n      recordTimer,\n    });\n\n    if (presets) {\n      for (let preset of presets) {\n        this.set(preset);\n      }\n      this.values(details, { presets: undefined });\n    }\n\n    const result = this.get(details.model, details.id);\n\n    return result !== undefined ? result : record;\n  },\n\n  async getFetch(model, id, fetch) {\n    if (this.options.enabled) {\n      this.debug('cache.getFetch', ...arguments);\n      const value = this.get(model, id);\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    const record = await fetch();\n    return this.setRecord(record, { model, id });\n  },\n\n  clear(model = undefined, id = undefined) {\n    this.debug('cache.clear', ...arguments);\n    if (model) {\n      if (id) {\n        set(VALUES, `${model}.${id}`, undefined);\n      } else {\n        set(VALUES, model, undefined);\n      }\n    } else {\n      VALUES = {};\n    }\n  },\n};\n\nexport default cacheApi;\n","import { defaultMethods } from './utils';\nimport cache from './cache';\n\nfunction methods(request) {\n  const { get, list } = defaultMethods(request, '/attributes', ['list', 'get']);\n\n  return {\n    get: (id, ...args) => {\n      return cache.getFetch('attributes', id, () => get(id, ...args));\n    },\n\n    list,\n  };\n}\n\nexport default methods;\n","import {\n  get,\n  reduce,\n  find,\n  uniq,\n  defaultMethods,\n  toSnake,\n  toCamel,\n  isEqual,\n  snakeCase,\n} from './utils';\nimport cache from './cache';\nimport attributesApi from './attributes';\n\nlet OPTIONS;\n\nfunction methods(request, opt) {\n  OPTIONS = opt;\n  const { get, list } = defaultMethods(request, '/products', ['list', 'get']);\n  return {\n    get: (id, ...args) => {\n      return cache.getFetch('products', id, () => get(id, ...args));\n    },\n\n    list,\n\n    variation: calculateVariation,\n\n    categories: getCategories,\n\n    attributes: getAttributes,\n\n    priceRange: getPriceRange,\n\n    filters: getFilters,\n\n    filterableAttributeFilters: (products, options) =>\n      getFilterableAttributeFilters(request, products, options),\n  };\n}\n\nfunction getProductOptionIndex(product, filter = undefined) {\n  if (!product.options) {\n    return {};\n  }\n  const productOptions = filter\n    ? product.options.filter(filter)\n    : product.options;\n  return reduce(\n    productOptions,\n    (acc, op) => {\n      const values = reduce(\n        op.values,\n        (acc, val) => ({\n          ...acc,\n          [val.id]: { ...val, id: val.id },\n          [val.name]: { ...val, id: val.id },\n        }),\n        {},\n      );\n      return {\n        ...acc,\n        [op.id]: { ...op, values },\n        [op.name]: { ...op, values },\n      };\n    },\n    {},\n  );\n}\n\nfunction cleanProductOptions(options) {\n  let result = options || [];\n  if (options && typeof options === 'object' && !(options instanceof Array)) {\n    result = [];\n    for (const key in options) {\n      result.push({\n        id: key,\n        value: options[key],\n      });\n    }\n  }\n  if (result instanceof Array) {\n    return result.map((op) => ({\n      id: op.id || op.name,\n      value: op.value,\n    }));\n  }\n  return result;\n}\n\nfunction getVariantOptionValueIds(product, options) {\n  const cleanOptions = cleanProductOptions(options);\n  const index = getProductOptionIndex(product, (op) => op.variant);\n  const optionValueIds = [];\n  for (const option of cleanOptions) {\n    if (index[option.id] && index[option.id].values[option.value]) {\n      optionValueIds.push(index[option.id].values[option.value].id);\n    }\n  }\n  return optionValueIds;\n}\n\nfunction findVariantWithOptionValueIds(product, ids) {\n  if (ids.length > 0) {\n    const variants = product.variants && product.variants.results;\n    if (variants.length > 0) {\n      for (const variant of variants) {\n        const variantObj = toSnake(variant);\n        const matched = isEqual(variantObj.option_value_ids.sort(), ids.sort());\n        if (matched) {\n          return variant;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nfunction findVariantWithOptions(product, options) {\n  const optionValueIds = getVariantOptionValueIds(product, options);\n  return findVariantWithOptionValueIds(product, optionValueIds);\n}\n\nfunction calculateVariation(input, options, purchaseOption) {\n  const product = OPTIONS.useCamelCase ? toSnake(input) : input;\n  const purchaseOp = findPurchaseOption(product, purchaseOption);\n  const variation = {\n    ...product,\n    price: purchaseOp.price || 0,\n    sale_price: purchaseOp.sale_price,\n    orig_price: purchaseOp.orig_price,\n    stock_status: product.stock_status,\n  };\n  let optionPrice = 0;\n  const variantOptionValueIds = [];\n  const cleanOptions = cleanProductOptions(options);\n  const index = getProductOptionIndex(product);\n  for (const option of cleanOptions) {\n    if (index[option.id] && index[option.id].values[option.value]) {\n      if (index[option.id].variant) {\n        variantOptionValueIds.push(index[option.id].values[option.value].id);\n      } else {\n        optionPrice += index[option.id].values[option.value].price || 0;\n      }\n    }\n  }\n  if (variantOptionValueIds.length > 0) {\n    const variant = findVariantWithOptionValueIds(\n      product,\n      variantOptionValueIds,\n    );\n    if (variant) {\n      let variantPurchaseOp = purchaseOp;\n      try {\n        variantPurchaseOp = findPurchaseOption(variant, purchaseOption);\n      } catch (err) {\n        // noop\n      }\n      variation.variant_id = variant.id;\n      variation.price = variantPurchaseOp.price || 0;\n      variation.sale_price =\n        variantPurchaseOp.sale_price || purchaseOp.sale_price;\n      variation.orig_price =\n        variantPurchaseOp.orig_price || purchaseOp.orig_price;\n      variation.stock_status = variant.stock_status;\n      variation.stock_level = variant.stock_level || 0;\n      variation.images =\n        (variant.images && variant.images.length\n          ? variant.images\n          : product.images) || [];\n    }\n  }\n  if (optionPrice > 0) {\n    variation.price += optionPrice;\n    if (variation.sale_price) {\n      variation.sale_price += optionPrice;\n    }\n    if (variation.orig_price) {\n      variation.orig_price += optionPrice;\n    }\n  }\n  if (variation.sale_price === undefined) {\n    delete variation.sale_price;\n  }\n  if (variation.orig_price === undefined) {\n    delete variation.orig_price;\n  }\n  return OPTIONS.useCamelCase ? toCamel(variation) : variation;\n}\n\nfunction findPurchaseOption(product, purchaseOption) {\n  const plan = get(purchaseOption, 'plan_id', get(purchaseOption, 'plan'));\n  const type = get(\n    purchaseOption,\n    'type',\n    typeof purchaseOption === 'string'\n      ? purchaseOption\n      : plan !== undefined\n      ? 'subscription'\n      : 'standard',\n  );\n  let option = get(product, `purchase_options.${type}`);\n  if (!option && type !== 'standard') {\n    throw new Error(\n      `Product purchase option '${type}' not found or not active`,\n    );\n  }\n  if (option) {\n    if (option.plans) {\n      if (plan !== undefined) {\n        option = find(option.plans, { id: plan });\n        if (!option) {\n          throw new Error(\n            `Subscription purchase plan '${plan}' not found or not active`,\n          );\n        }\n      } else {\n        option = option.plans[0];\n      }\n    }\n    return {\n      ...option,\n      price: typeof option.price === 'number' ? option.price : product.price,\n      sale_price:\n        typeof option.sale_price === 'number'\n          ? option.sale_price\n          : product.sale_price,\n      orig_price:\n        typeof option.orig_price === 'number'\n          ? option.orig_price\n          : product.orig_price,\n    };\n  }\n  return {\n    type: 'standard',\n    price: product.price,\n    sale_price: product.sale_price,\n    orig_price: product.orig_price,\n  };\n}\n\nasync function getFilterableAttributeFilters(request, products, options) {\n  const { results: filterableAttributes } = await attributesApi(\n    request,\n    OPTIONS,\n  ).list({\n    filterable: true,\n  });\n\n  return getFilters(products, { ...options, filterableAttributes });\n}\n\nfunction getFilters(products, options = {}) {\n  let attributes =\n    (options.attributes || options.attributes === undefined) &&\n    getAttributes(products);\n\n  if (options.filterableAttributes) {\n    attributes = attributes.filter((productAttr) =>\n      options.filterableAttributes.find(\n        (filterableAttr) => productAttr.id === filterableAttr.id,\n      ),\n    );\n  }\n\n  const categories =\n    (options.categories || options.categories === undefined) &&\n    getCategories(products);\n  const priceRange =\n    (options.price || options.price === undefined) && getPriceRange(products);\n\n  let filters = [];\n\n  if (priceRange) {\n    filters.push({\n      id: 'price',\n      label: 'Price',\n      type: 'range',\n      options: [\n        {\n          value: priceRange.min,\n          label: priceRange.min, // TODO: formatting\n        },\n        {\n          value: priceRange.max,\n          label: priceRange.max, // TODO: formatting\n        },\n      ],\n      interval: priceRange.interval,\n    });\n  }\n\n  if (categories && categories.length > 0) {\n    filters.push({\n      id: 'category',\n      label: 'Category',\n      type: 'select',\n      options: categories.map((category) => ({\n        value: category.slug,\n        label: category.name,\n      })),\n    });\n  }\n\n  if (attributes && attributes.length > 0) {\n    filters = [\n      ...filters,\n      ...reduce(\n        attributes,\n        (acc, attr) => [\n          ...acc,\n          ...(attr.id !== 'category' &&\n          attr.id !== 'price' &&\n          attr.values instanceof Array &&\n          attr.values.length > 0\n            ? [\n                {\n                  id: attr.id,\n                  label: attr.name,\n                  type: 'select',\n                  options: attr.values.map((value) => ({\n                    value,\n                    label: value,\n                  })),\n                },\n              ]\n            : []),\n        ],\n        [],\n      ),\n    ];\n  }\n\n  return filters;\n}\n\nfunction getCategories(products) {\n  const categories = [];\n  const collection =\n    (products && products.results) || (products.id ? [products] : products);\n  if (collection instanceof Array) {\n    for (let product of collection) {\n      if (product.categories) {\n        for (let category of product.categories) {\n          if (!category) continue;\n          let ex = find(categories, { id: category.id });\n          if (!ex) {\n            categories.push(category);\n          }\n        }\n      }\n    }\n  }\n  return categories;\n}\n\nfunction getAttributes(products) {\n  const attributes = [];\n  const collection =\n    (products && products.results) || (products.id ? [products] : products);\n  if (collection instanceof Array) {\n    for (let product of collection) {\n      if (product.attributes) {\n        for (let id in product.attributes) {\n          if (!product.attributes[id]) continue;\n          const value = product.attributes[id].value;\n          let attr = find(attributes, { id: snakeCase(id) });\n          if (attr) {\n            attr.values = uniq([\n              ...attr.values,\n              ...(value instanceof Array ? value : [value]),\n            ]);\n          } else {\n            attributes.push({\n              ...product.attributes[id],\n              value: undefined,\n              values: [...(value instanceof Array ? value : [value])],\n            });\n          }\n        }\n      }\n    }\n  }\n  return attributes;\n}\n\nfunction getPriceRange(products) {\n  let min;\n  let max;\n  let interval;\n  const collection =\n    (products && products.results) || (products.id ? [products] : products);\n  if (collection instanceof Array) {\n    for (let product of collection) {\n      if (max === undefined || product.price > max) {\n        max = Math.ceil(product.price);\n      }\n      if (min === undefined || product.price < min) {\n        min = Math.floor(product.price);\n      }\n    }\n  }\n  if (min === max) {\n    return null;\n  }\n  interval = Math.ceil((max - min) / 10) || 1;\n  if (interval > 1000) {\n    interval = 1000;\n  } else if (interval > 100) {\n    interval = 100;\n  } else if (interval > 10) {\n    interval = 10;\n  }\n  if (max % interval > 0) {\n    max = interval + max - (max % interval);\n  }\n  if (min % interval > 0) {\n    min = min - (min % interval);\n  }\n  while (((max - min) / interval) % 1 > 0) {\n    max++;\n  }\n  return {\n    min,\n    max,\n    interval,\n  };\n}\n\nexport {\n  methods as default,\n  cleanProductOptions,\n  getProductOptionIndex,\n  getVariantOptionValueIds,\n  findVariantWithOptions,\n  calculateVariation,\n};\n","import { cloneDeep } from './utils';\nimport { cleanProductOptions } from './products';\n\nfunction methods(request, options) {\n  return {\n    state: null,\n    order: null,\n    settings: null,\n    requested: false,\n    pendingRequests: [],\n    cacheClear: null,\n\n    async requestStateChange(method, url, id, data) {\n      return this.requestStateSync(async () => {\n        const result = await request(method, url, id, data);\n        if (result && result.errors) {\n          return result;\n        }\n        this.state = result;\n        return result;\n      });\n    },\n\n    async requestStateSync(handler) {\n      if (this.state) {\n        return await handler();\n      } else if (this.requested) {\n        return new Promise((resolve) => {\n          this.pendingRequests.push({ handler, resolve });\n        });\n      }\n\n      this.requested = true;\n      const result = await handler();\n      this.requested = false;\n      while (this.pendingRequests.length > 0) {\n        const { handler, resolve } = this.pendingRequests.shift();\n        resolve(handler());\n      }\n      return result;\n    },\n\n    get() {\n      let data;\n      if (this.cacheClear) {\n        this.cacheClear = null;\n        data = { $cache: false };\n      }\n      return this.requestStateChange('get', '/cart', undefined, data);\n    },\n\n    clearCache() {\n      this.cacheClear = true;\n    },\n\n    getItemData(item, data = {}) {\n      let result = cloneDeep(item);\n      if (typeof item === 'string') {\n        result = {\n          ...(data || {}),\n          product_id: item,\n        };\n      }\n      if (result && result.options) {\n        result.options = cleanProductOptions(result.options);\n      }\n      return result;\n    },\n\n    addItem(item, data) {\n      return this.requestStateChange(\n        'post',\n        '/cart/items',\n        this.getItemData(item, data),\n      );\n    },\n\n    updateItem(id, item) {\n      return this.requestStateChange(\n        'put',\n        `/cart/items/${id}`,\n        this.getItemData(item),\n      );\n    },\n\n    setItems(input) {\n      let items = input;\n      if (items && items.map) {\n        items = items.map(this.getItemData);\n      }\n      return this.requestStateChange('put', '/cart/items', items);\n    },\n\n    removeItem(id) {\n      return this.requestStateChange('delete', `/cart/items/${id}`);\n    },\n\n    recover(checkoutId) {\n      return this.requestStateChange('put', `/cart/recover/${checkoutId}`);\n    },\n\n    update(input) {\n      let data = input;\n      if (data.items && data.items.map) {\n        data = {\n          ...data,\n          items: data.items.map(this.getItemData),\n        };\n      }\n      return this.requestStateChange('put', `/cart`, data);\n    },\n\n    applyCoupon(code) {\n      return this.requestStateChange('put', '/cart/coupon', { code });\n    },\n\n    removeCoupon() {\n      return this.requestStateChange('delete', '/cart/coupon');\n    },\n\n    applyGiftcard(code) {\n      return this.requestStateChange('post', '/cart/giftcards', { code });\n    },\n\n    removeGiftcard(id) {\n      return this.requestStateChange('delete', `/cart/giftcards/${id}`);\n    },\n\n    async getShippingRates() {\n      await this.requestStateChange('get', '/cart/shipment-rating');\n      return this.state[\n        options.useCamelCase ? 'shipmentRating' : 'shipment_rating'\n      ];\n    },\n\n    async submitOrder() {\n      const result = await request('post', '/cart/order');\n      if (result.errors) {\n        return result;\n      }\n      this.state = null;\n      this.order = result;\n      return result;\n    },\n\n    async getOrder(checkoutId = undefined) {\n      let result;\n      if (checkoutId) {\n        result = await request('get', `/cart/order`, {\n          checkout_id: checkoutId,\n        });\n      } else {\n        result = await request('get', `/cart/order`);\n      }\n      this.order = result;\n      return result;\n    },\n\n    async getSettings() {\n      this.settings = await request('get', '/cart/settings');\n      return this.settings;\n    },\n  };\n}\n\nexport default methods;\n","function methods(request) {\n  return {\n    state: null,\n\n    async requestStateChange(method, url, id, data) {\n      const result = await request(method, url, id, data);\n      if (result && result.errors) {\n        return result;\n      }\n      return (this.state = result);\n    },\n\n    get(query) {\n      return this.requestStateChange('get', '/account', query);\n    },\n\n    create(data) {\n      return this.requestStateChange('post', '/account', data);\n    },\n\n    update(data) {\n      return this.requestStateChange('put', '/account', data);\n    },\n\n    login(email, password) {\n      if (password && password.password_token) {\n        return this.requestStateChange('post', '/account/login', {\n          email,\n          password_token: password.password_token,\n        });\n      }\n      return this.requestStateChange('post', '/account/login', {\n        email,\n        password,\n      });\n    },\n\n    logout() {\n      this.state = null;\n      return request('post', '/account/logout');\n    },\n\n    recover(data) {\n      return request('post', '/account/recover', data);\n    },\n\n    listAddresses(query) {\n      return request('get', '/account/addresses', query);\n    },\n\n    createAddress(data) {\n      return request('post', '/account/addresses', data);\n    },\n\n    updateAddress(id, data) {\n      return request('put', `/account/addresses/${id}`, data);\n    },\n\n    deleteAddress(id) {\n      return request('delete', `/account/addresses/${id}`);\n    },\n\n    listCards(query) {\n      return request('get', '/account/cards', query);\n    },\n\n    createCard(data) {\n      return request('post', '/account/cards', data);\n    },\n\n    updateCard(id, data) {\n      return request('put', `/account/cards/${id}`, data);\n    },\n\n    deleteCard(id) {\n      return request('delete', `/account/cards/${id}`);\n    },\n\n    listOrders(query) {\n      return request('get', `/account/orders`, query);\n    },\n\n    getOrder(id) {\n      return request('get', `/account/orders/${id}`);\n    },\n\n    // Deprecated methods\n    getAddresses(query) {\n      return request('get', '/account/addresses', query);\n    },\n    getCards(query) {\n      return request('get', '/account/cards', query);\n    },\n    getOrders(query) {\n      return request('get', `/account/orders`, query);\n    },\n  };\n}\n\nexport default methods;\n","import { defaultMethods } from './utils';\nimport cache from './cache';\n\nfunction methods(request) {\n  const { get, list } = defaultMethods(request, '/categories', ['list', 'get']);\n\n  return {\n    get: (id, ...args) => {\n      return cache.getFetch('categories', id, () => get(id, ...args));\n    },\n\n    list,\n  };\n}\n\nexport default methods;\n","import { cleanProductOptions } from './products';\nimport { defaultMethods } from './utils';\nimport cache from './cache';\n\nfunction methods(request) {\n  const { get, list } = defaultMethods(request, '/subscriptions', [\n    'list',\n    'get',\n  ]);\n  return {\n    get: (id, ...args) => {\n      return cache.getFetch('subscriptions', id, () => get(id, ...args));\n    },\n\n    list,\n\n    getCleanData(data) {\n      if (data && data.options) {\n        data.options = cleanProductOptions(data.options);\n      }\n      if (data.items && data.items.map) {\n        data.items = data.items.map((item) => {\n          if (item.options) {\n            item.options = cleanProductOptions(item.options);\n          }\n          return item;\n        });\n      }\n      return data;\n    },\n\n    create(data) {\n      return request('post', '/subscriptions', this.getCleanData(data));\n    },\n\n    update(id, data) {\n      return request('put', `/subscriptions/${id}`, this.getCleanData(data));\n    },\n\n    addItem(id, item) {\n      return request(\n        'post',\n        `/subscriptions/${id}/items`,\n        this.getCleanData(item),\n      );\n    },\n\n    setItems(id, items) {\n      if (items && items.map) {\n        items = items.map(this.getCleanData);\n      }\n      return request('put', `/subscriptions/${id}/items`, items);\n    },\n\n    updateItem(id, itemId, item) {\n      return request(\n        'put',\n        `/subscriptions/${id}/items/${itemId}`,\n        this.getCleanData(item),\n      );\n    },\n\n    removeItem(id, itemId) {\n      return request('delete', `/subscriptions/${id}/items/${itemId}`);\n    },\n  };\n}\n\nexport default methods;\n","import cache from './cache';\n\nfunction methods(request, opt) {\n  return {\n    get: (type, id, query) => {\n      return cache.getFetch(`content_${type}`, id, () =>\n        request('get', `/content/${type}`, id, {\n          $preview: opt.previewContent,\n          ...(query || {}),\n        }),\n      );\n    },\n\n    list: (type, query) => request('get', `/content/${type}`, undefined, query),\n  };\n}\n\nexport default methods;\n","import {\n  get,\n  find,\n  set,\n  merge,\n  toCamel,\n  isObject,\n  cloneDeep,\n  camelCase,\n} from './utils';\n\nfunction methods(request, opt) {\n  return {\n    state: null,\n    menuState: null,\n    paymentState: null,\n    subscriptionState: null,\n    sessionState: null,\n    localizedState: {},\n\n    refresh() {\n      this.state = null;\n      this.menuState = null;\n      this.paymentState = null;\n      this.subscriptionState = null;\n      this.sessionState = null;\n      this.localizedState = {};\n      return this.get();\n    },\n\n    getState(\n      uri,\n      stateName,\n      { id = undefined, def = undefined, refresh = false } = {},\n    ) {\n      if (!this[stateName] || refresh) {\n        this[stateName] = request('get', uri);\n      }\n      if (this[stateName] && typeof this[stateName].then === 'function') {\n        return this[stateName].then((state) => {\n          this[stateName] = state;\n          return this.getLocalizedState(stateName, id, def);\n        });\n      }\n      return this.getLocalizedState(stateName, id, def);\n    },\n\n    getLocalizedState(stateName, id, def) {\n      const locale = this.getCurrentLocale();\n\n      const ls = this.localizedState;\n      if (ls.code !== locale) {\n        ls.code = locale;\n        delete ls[locale];\n      }\n      if (!ls[locale]) {\n        ls[locale] = {};\n      }\n      if (!ls[locale][stateName]) {\n        ls[locale][stateName] = this.decodeLocale(this[stateName]);\n      }\n      return id ? get(ls[locale][stateName], id, def) : ls[locale][stateName];\n    },\n\n    findState(uri, stateName, { where = undefined, def = undefined } = {}) {\n      const state = this.getState(uri, stateName);\n      if (state && typeof state.then === 'function') {\n        return state.then((state) => find(state, where) || def);\n      }\n      return find(state, where) || def;\n    },\n\n    get(id = undefined, def = undefined) {\n      return this.getState('/settings', 'state', { id, def });\n    },\n\n    getCurrentLocale() {\n      return opt.api.locale.selected();\n    },\n\n    getStoreLocale() {\n      return get(this.state, 'store.locale');\n    },\n\n    getStoreLocales() {\n      return get(this.state, 'store.locales');\n    },\n\n    set({ model, path, value }) {\n      const locale = this.getCurrentLocale();\n      const stateName = model ? `${model.replace(/s$/, '')}State` : 'state';\n      const { useCamelCase } = opt;\n\n      let mergeData = {};\n\n      if (path) set(mergeData, path, value);\n      else mergeData = value;\n\n      if (useCamelCase) {\n        mergeData = toCamel(mergeData);\n      }\n\n      this[stateName] = merge(this[stateName] || {}, mergeData);\n\n      if (this.localizedState[locale]) {\n        this.localizedState[locale][stateName] = this.decodeLocale(\n          this[stateName],\n        );\n      }\n    },\n\n    menus(id = undefined, def = undefined) {\n      return this.findState('/settings/menus', 'menuState', {\n        where: { id },\n        def,\n      });\n    },\n\n    payments(id = undefined, def = undefined) {\n      return this.getState('/settings/payments', 'paymentState', { id, def });\n    },\n\n    subscriptions(id = undefined, def = undefined) {\n      return this.getState('/settings/subscriptions', 'subscriptionState', {\n        id,\n        def,\n      });\n    },\n\n    session(id = undefined, def = undefined) {\n      return this.getState('/session', 'sessionState', { id, def });\n    },\n\n    decodeLocale(values) {\n      const locale = this.getCurrentLocale();\n\n      if (!values || typeof values !== 'object') {\n        return values;\n      }\n\n      let configs = this.getStoreLocales();\n      if (configs) {\n        configs = configs.reduce(\n          (acc, config) => ({\n            ...acc,\n            [config.code]: config,\n          }),\n          {},\n        );\n      } else {\n        configs = {};\n      }\n\n      return decodeLocaleObjects(cloneDeep(values), locale, configs, opt);\n    },\n\n    async load() {\n      try {\n        const { settings, menus, payments, subscriptions, session } =\n          await request('get', '/settings/all');\n\n        this.localizedState = {};\n\n        this.set({\n          value: settings,\n        });\n\n        this.set({\n          model: 'menus',\n          value: menus,\n        });\n\n        this.set({\n          model: 'payments',\n          value: payments,\n        });\n\n        this.set({\n          model: 'subscriptions',\n          value: subscriptions,\n        });\n\n        this.set({\n          model: 'session',\n          value: session,\n        });\n      } catch (err) {\n        console.error(`Swell: unable to loading settings (${err})`);\n      }\n    },\n  };\n}\n\nfunction decodeLocaleObjects(values, locale, configs, opt) {\n  if (isObject(values)) {\n    const keys = Object.keys(values);\n    for (let key of keys) {\n      if (key === '$locale') {\n        decodeLocaleValue(locale, values, key, configs, opt);\n        delete values.$locale;\n      }\n      if (values[key] !== undefined) {\n        values[key] = decodeLocaleObjects(values[key], locale, configs, opt);\n      }\n    }\n  } else if (values instanceof Array) {\n    for (var i = 0; i < values.length; i++) {\n      values[i] = decodeLocaleObjects(values[i], locale, configs, opt);\n    }\n  }\n  return values;\n}\n\nfunction decodeLocaleValue(locale, values, key, configs, opt) {\n  if (!locale || !isObject(values[key])) {\n    return;\n  }\n\n  let returnLocaleKey;\n  let returnLocaleConfig;\n  const localeKeys = Object.keys(values[key]);\n  for (let localeKey of localeKeys) {\n    const shortKey = localeKey.replace(/\\-.+$/, '');\n    const transformedLocale = opt.useCamelCase ? camelCase(locale) : locale;\n\n    if (\n      localeKey === locale ||\n      localeKey === transformedLocale ||\n      shortKey === transformedLocale\n    ) {\n      returnLocaleKey = locale;\n      returnLocaleConfig = configs[locale];\n    }\n  }\n\n  // Find configured locale for fallback\n  if (!returnLocaleKey && isObject(configs)) {\n    const localeKeys = Object.keys(configs);\n    for (let localeKey of localeKeys) {\n      const shortKey = localeKey.replace(/\\-.+$/, '');\n      if (localeKey === locale || shortKey === locale) {\n        returnLocaleKey = localeKey;\n        returnLocaleConfig = configs[localeKey];\n      }\n    }\n  }\n\n  // Find fallback key and values if applicable\n  let fallbackKeys;\n  let fallbackValues = {};\n  if (returnLocaleConfig) {\n    let fallbackKey = returnLocaleConfig.fallback;\n    const origFallbackKey = fallbackKey;\n    while (fallbackKey) {\n      fallbackKeys = fallbackKeys || [];\n      fallbackKeys.push(fallbackKey);\n      fallbackValues = {\n        ...(values[key][fallbackKey] || {}),\n        ...fallbackValues,\n      };\n      fallbackKey = configs[fallbackKey] && configs[fallbackKey].fallback;\n      if (origFallbackKey === fallbackKey) {\n        break;\n      }\n    }\n  }\n\n  // Merge locale value with fallbacks\n  let localeValues = {\n    ...fallbackValues,\n    ...(values[key][returnLocaleKey] || {}),\n  };\n  const valueKeys = Object.keys(localeValues);\n  for (let valueKey of valueKeys) {\n    const hasValue =\n      localeValues[valueKey] !== null && localeValues[valueKey] !== '';\n    let shouldFallback = fallbackKeys && !hasValue;\n    if (shouldFallback) {\n      for (let fallbackKey of fallbackKeys) {\n        shouldFallback =\n          !values[key][fallbackKey] ||\n          values[key][fallbackKey][valueKey] === null ||\n          values[key][fallbackKey][valueKey] === '';\n        if (shouldFallback) {\n          if (fallbackKey === 'none') {\n            values[valueKey] = null;\n            break;\n          }\n          continue;\n        } else {\n          values[valueKey] = values[key][fallbackKey][valueKey];\n          break;\n        }\n      }\n    } else {\n      if (hasValue) {\n        values[valueKey] = localeValues[valueKey];\n      }\n    }\n  }\n}\n\nexport default methods;\n","import reduce from 'lodash/reduce';\nimport isEmpty from 'lodash/isEmpty';\nimport get from 'lodash/get';\nimport toLower from 'lodash/toLower';\nimport map from 'lodash/map';\nimport toNumber from 'lodash/toNumber';\n\nconst addressFieldsMap = {\n  city: 'city',\n  country: 'country',\n  line1: 'address1',\n  line2: 'address2',\n  postal_code: 'zip',\n  state: 'state',\n};\n\nconst billingFieldsMap = {\n  name: 'name',\n  phone: 'phone',\n};\n\nfunction mapValues(fieldsMap, data) {\n  const result = {};\n  for (const [destinationKey, sourceKey] of Object.entries(fieldsMap)) {\n    const value = data[sourceKey];\n    if (value) {\n      result[destinationKey] = value;\n    }\n  }\n  return result;\n}\n\nfunction getBillingDetails(cart) {\n  const details = {\n    ...mapValues(billingFieldsMap, cart.billing),\n  };\n\n  if (cart.account && cart.account.email) {\n    details.email = cart.account.email;\n  }\n\n  const address = mapValues(addressFieldsMap, cart.billing);\n  if (!isEmpty(address)) {\n    details.address = address;\n  }\n\n  return details;\n}\n\nfunction getKlarnaItems(cart) {\n  const currency = toLower(get(cart, 'currency', 'eur'));\n  const items = map(cart.items, (item) => ({\n    type: 'sku',\n    description: item.product.name,\n    quantity: item.quantity,\n    currency,\n    amount: Math.round(toNumber(item.price_total - item.discount_total) * 100),\n  }));\n\n  const tax = get(cart, 'tax_included_total');\n  if (tax) {\n    items.push({\n      type: 'tax',\n      description: 'Taxes',\n      currency,\n      amount: Math.round(toNumber(tax) * 100),\n    });\n  }\n\n  const shipping = get(cart, 'shipping', {});\n  const shippingTotal = get(cart, 'shipment_total', {});\n  if (shipping.price) {\n    items.push({\n      type: 'shipping',\n      description: shipping.service_name,\n      currency,\n      amount: Math.round(toNumber(shippingTotal) * 100),\n    });\n  }\n\n  return items;\n}\n\nfunction setKlarnaBillingShipping(source, data) {\n  const shippingNameFieldsMap = {\n    shipping_first_name: 'first_name',\n    shipping_last_name: 'last_name',\n  };\n  const shippingFieldsMap = {\n    phone: 'phone',\n  };\n  const billingNameFieldsMap = {\n    first_name: 'first_name',\n    last_name: 'last_name',\n  };\n  const billingFieldsMap = {\n    email: 'email',\n  };\n\n  const fillValues = (fieldsMap, data) =>\n    reduce(\n      fieldsMap,\n      (acc, srcKey, destKey) => {\n        const value = data[srcKey];\n        if (value) {\n          acc[destKey] = value;\n        }\n        return acc;\n      },\n      {},\n    );\n\n  source.klarna = {\n    ...source.klarna,\n    ...fillValues(shippingNameFieldsMap, data.shipping),\n  };\n  const shipping = fillValues(shippingFieldsMap, data.shipping);\n  const shippingAddress = fillValues(addressFieldsMap, data.shipping);\n  if (shipping || shippingAddress) {\n    source.source_order.shipping = {\n      ...(shipping ? shipping : {}),\n      ...(shippingAddress ? { address: shippingAddress } : {}),\n    };\n  }\n\n  source.klarna = {\n    ...source.klarna,\n    ...fillValues(\n      billingNameFieldsMap,\n      data.billing || get(data, 'account.billing') || data.shipping,\n    ),\n  };\n  const billing = fillValues(billingFieldsMap, data.account);\n  const billingAddress = fillValues(\n    addressFieldsMap,\n    data.billing || get(data, 'account.billing') || data.shipping,\n  );\n  if (billing || billingAddress) {\n    source.owner = {\n      ...(billing ? billing : {}),\n      ...(billingAddress ? { address: billingAddress } : {}),\n    };\n  }\n}\n\nfunction setBancontactOwner(source, data) {\n  const fillValues = (fieldsMap, data) =>\n    reduce(\n      fieldsMap,\n      (acc, srcKey, destKey) => {\n        const value = data[srcKey];\n        if (value) {\n          acc[destKey] = value;\n        }\n        return acc;\n      },\n      {},\n    );\n  const { account = {}, billing, shipping } = data;\n  const billingData = {\n    ...account.shipping,\n    ...account.billing,\n    ...shipping,\n    ...billing,\n  };\n  const billingAddress = fillValues(addressFieldsMap, billingData);\n\n  source.owner = {\n    email: account.email,\n    name: billingData.name || account.name,\n    ...(billingData.phone\n      ? { phone: billingData.phone }\n      : account.phone\n      ? { phone: account.phone }\n      : {}),\n    ...(!isEmpty(billingAddress) ? { address: billingAddress } : {}),\n  };\n}\n\nasync function createPaymentMethod(stripe, cardElement, authorize, cart) {\n  const billingDetails = getBillingDetails(cart);\n  const { paymentMethod, error: paymentMethodError } =\n    await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n      ...(!isEmpty(billingDetails) ? { billing_details: billingDetails } : {}),\n    });\n\n  if (paymentMethodError) {\n    return { error: paymentMethodError };\n  }\n\n  const customer = cart.account && cart.account.stripe_customer;\n  const authorization = await authorize({\n    gateway: 'stripe',\n    params: {\n      usage: 'off_session',\n      payment_method: paymentMethod.id,\n      ...(customer ? { customer } : {}),\n    },\n  });\n\n  if (!authorization) {\n    return;\n  }\n\n  const { error: setupIntentError } = await stripe.confirmCardSetup(\n    authorization.client_secret,\n  );\n\n  return setupIntentError ? { error: setupIntentError } : authorization.card;\n}\n\nasync function createIDealPaymentMethod(stripe, element, cart) {\n  const billingDetails = getBillingDetails(cart);\n  return await stripe.createPaymentMethod({\n    type: 'ideal',\n    ideal: element,\n    ...(billingDetails ? { billing_details: billingDetails } : {}),\n  });\n}\n\nasync function createKlarnaSource(stripe, cart) {\n  const sourceObject = {\n    type: 'klarna',\n    flow: 'redirect',\n    amount: Math.round(get(cart, 'grand_total', 0) * 100),\n    currency: toLower(get(cart, 'currency', 'eur')),\n    klarna: {\n      product: 'payment',\n      purchase_country: get(cart, 'settings.country', 'DE'),\n    },\n    source_order: {\n      items: getKlarnaItems(cart),\n    },\n    redirect: {\n      return_url: window.location.href,\n    },\n  };\n  setKlarnaBillingShipping(sourceObject, cart);\n\n  return await stripe.createSource(sourceObject);\n}\n\nasync function createBancontactSource(stripe, cart) {\n  const sourceObject = {\n    type: 'bancontact',\n    amount: Math.round(get(cart, 'grand_total', 0) * 100),\n    currency: toLower(get(cart, 'currency', 'eur')),\n    redirect: {\n      return_url: window.location.href,\n    },\n  };\n  setBancontactOwner(sourceObject, cart);\n\n  return await stripe.createSource(sourceObject);\n}\n\nfunction stripeAmountByCurrency(currency, amount) {\n  const zeroDecimalCurrencies = [\n    'BIF', // Burundian Franc\n    'DJF', // Djiboutian Franc,\n    'JPY', // Japanese Yen\n    'KRW', // South Korean Won\n    'PYG', // Paraguayan Guaraní\n    'VND', // Vietnamese Đồng\n    'XAF', // Central African Cfa Franc\n    'XPF', // Cfp Franc\n    'CLP', // Chilean Peso\n    'GNF', // Guinean Franc\n    'KMF', // Comorian Franc\n    'MGA', // Malagasy Ariary\n    'RWF', // Rwandan Franc\n    'VUV', // Vanuatu Vatu\n    'XOF', // West African Cfa Franc\n  ];\n  if (zeroDecimalCurrencies.includes(currency.toUpperCase())) {\n    return amount;\n  } else {\n    return Math.round(amount * 100);\n  }\n}\n\nexport {\n  createPaymentMethod,\n  createIDealPaymentMethod,\n  createKlarnaSource,\n  createBancontactSource,\n  stripeAmountByCurrency,\n};\n","import get from 'lodash/get';\n\nfunction generateOrderId() {\n  return Math.random().toString(36).substr(2, 9);\n}\n\nexport async function createQuickpayCard(authorize) {\n  const returnUrl = window.location.origin + window.location.pathname;\n  const authorization = await authorize({\n    gateway: 'quickpay',\n    params: {\n      action: 'create',\n      continueurl: `${returnUrl}?gateway=quickpay&redirect_status=succeeded`,\n      cancelurl: `${returnUrl}?gateway=quickpay&redirect_status=canceled`,\n    },\n  });\n\n  if (authorization && authorization.url) {\n    window.location.replace(authorization.url);\n  }\n}\n\nexport async function getQuickpayCardDetais(id, authorize) {\n  return await authorize({\n    gateway: 'quickpay',\n    params: { action: 'get', id },\n  });\n}\n\nexport async function createQuickpayPayment(cart, createIntent) {\n  return await createIntent({\n    gateway: 'quickpay',\n    intent: {\n      currency: get(cart, 'currency', 'USD'),\n      order_id: generateOrderId(),\n    },\n  });\n}\n","import get from 'lodash/get';\n\nexport async function createPaysafecardPayment(cart, createIntent) {\n  const returnUrl = window.location.origin + window.location.pathname;\n  const url = `${returnUrl}?gateway=paysafecard`;\n\n  return await createIntent({\n    gateway: 'paysafecard',\n    intent: {\n      type: 'PAYSAFECARD',\n      amount: cart.grand_total,\n      redirect: {\n        success_url: url,\n        failure_url: url,\n      },\n      notification_url: url,\n      customer: {\n        id: get(cart, 'account.id'),\n      },\n      currency: get(cart, 'currency', 'USD'),\n    },\n  });\n}\n","import map from 'lodash/map';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport toNumber from 'lodash/toNumber';\n\nconst addressFieldsMap = {\n  given_name: 'first_name',\n  family_name: 'last_name',\n  city: 'city',\n  country: 'country',\n  phone: 'phone',\n  postal_code: 'zip',\n  street_address: 'address1',\n  street_address2: 'address2',\n  region: 'state',\n};\n\nconst mapFields = (fieldsMap, data) =>\n  reduce(\n    fieldsMap,\n    (acc, srcKey, destKey) => {\n      const value = data[srcKey];\n      if (value) {\n        acc[destKey] = value;\n      }\n      return acc;\n    },\n    {},\n  );\n\nconst mapAddressFields = (cart, addressField) => ({\n  ...mapFields(addressFieldsMap, cart[addressField]),\n  email: get(cart, 'account.email'),\n});\n\nfunction getOrderLines(cart) {\n  const items = map(cart.items, (item) => ({\n    type: 'physical',\n    name: get(item, 'product.name'),\n    reference: get(item, 'product.sku') || get(item, 'product.slug'),\n    quantity: item.quantity,\n    unit_price: Math.round(toNumber(item.price - item.discount_each) * 100),\n    total_amount: Math.round(\n      toNumber(item.price_total - item.discount_total) * 100,\n    ),\n    tax_rate: 0,\n    total_tax_amount: 0,\n  }));\n\n  const tax = get(cart, 'tax_included_total');\n  const taxAmount = toNumber(tax) * 100;\n  if (tax) {\n    items.push({\n      type: 'sales_tax',\n      name: 'Taxes',\n      quantity: 1,\n      unit_price: taxAmount,\n      total_amount: taxAmount,\n      tax_rate: 0,\n      total_tax_amount: 0,\n    });\n  }\n\n  const shipping = get(cart, 'shipping', {});\n  const shippingTotal = get(cart, 'shipment_total', {});\n  const shippingAmount = toNumber(shippingTotal) * 100;\n  if (shipping.price) {\n    items.push({\n      type: 'shipping_fee',\n      name: shipping.service_name,\n      quantity: 1,\n      unit_price: shippingAmount,\n      total_amount: shippingAmount,\n      tax_rate: 0,\n      total_tax_amount: 0,\n    });\n  }\n\n  return items;\n}\n\nasync function createKlarnaSession(cart, createIntent) {\n  const returnUrl = `${window.location.origin}${window.location.pathname}?gateway=klarna_direct&sid={{session_id}}`;\n  const successUrl = `${returnUrl}&authorization_token={{authorization_token}}`;\n\n  return createIntent({\n    gateway: 'klarna',\n    intent: {\n      locale: cart.display_locale || get(cart, 'settings.locale') || 'en-US',\n      purchase_country:\n        get(cart, 'billing.country') || get(cart, 'shipping.country'),\n      purchase_currency: cart.currency,\n      billing_address: mapAddressFields(cart, 'billing'),\n      shipping_address: mapAddressFields(cart, 'shipping'),\n      order_amount: Math.round(get(cart, 'grand_total', 0) * 100),\n      order_lines: JSON.stringify(getOrderLines(cart)),\n      merchant_urls: {\n        success: successUrl,\n        back: returnUrl,\n        cancel: returnUrl,\n        error: returnUrl,\n        failure: returnUrl,\n      },\n    },\n  });\n}\n\nexport { createKlarnaSession };\n","import get from 'lodash/get';\nimport toLower from 'lodash/toLower';\nimport cartApi from './cart';\nimport settingsApi from './settings';\nimport {\n  isFunction,\n  vaultRequest,\n  toSnake,\n  getLocationParams,\n  removeUrlParams,\n} from './utils';\nimport {\n  createPaymentMethod,\n  createIDealPaymentMethod,\n  createKlarnaSource,\n  createBancontactSource,\n  stripeAmountByCurrency,\n} from './utils/stripe';\nimport {\n  createQuickpayPayment,\n  createQuickpayCard,\n  getQuickpayCardDetais,\n} from './utils/quickpay';\nimport { createPaysafecardPayment } from './utils/paysafecard';\nimport { createKlarnaSession } from './utils/klarna';\n\nconst LOADING_SCRIPTS = {};\nconst CARD_ELEMENTS = {};\nconst API = {};\n\nlet options = null;\n\nfunction methods(request, opts) {\n  options = opts || options;\n\n  return {\n    params: null,\n    methodSettings: null,\n\n    get(id) {\n      return request('get', '/payments', id);\n    },\n\n    async methods() {\n      if (this.methodSettings) {\n        return this.methodSettings;\n      }\n      const result = await request('get', '/payment/methods');\n      return (this.methodSettings = result);\n    },\n\n    async createElements(elementParams) {\n      this.params = elementParams || {};\n      const cart = toSnake(await cartApi(request, options).get());\n      if (!cart) {\n        throw new Error('Cart not found');\n      }\n      const payMethods = toSnake(\n        await settingsApi(request, options).payments(),\n      );\n      if (payMethods.error) {\n        throw new Error(payMethods.error);\n      }\n      await render(request, cart, payMethods, this.params);\n    },\n\n    async tokenize(params) {\n      const cart = toSnake(await cartApi(request, options).get());\n      if (!cart) {\n        throw new Error('Cart not found');\n      }\n      const payMethods = toSnake(\n        await settingsApi(request, options).payments(),\n      );\n      if (payMethods.error) {\n        throw new Error(payMethods.error);\n      }\n      return await paymentTokenize(\n        request,\n        params || this.params,\n        payMethods,\n        cart,\n      );\n    },\n\n    async handleRedirect(params) {\n      const cart = toSnake(await cartApi(request, options).get());\n      if (!cart) {\n        throw new Error('Cart not found');\n      }\n      return await handleRedirect(request, params || this.params, cart);\n    },\n\n    async authenticate(id) {\n      const payment = await this.get(id);\n      if (!payment) {\n        throw new Error('Payment not found');\n      }\n      const payMethods = toSnake(\n        await settingsApi(request, options).payments(),\n      );\n      if (payMethods.error) {\n        throw new Error(payMethods.error);\n      }\n      return await authenticate(request, payment, payMethods);\n    },\n\n    async createIntent(data) {\n      const intent = await vaultRequest('post', '/intent', data);\n      if (intent.errors) {\n        const param = Object.keys(intent.errors)[0];\n        const err = new Error(intent.errors[param].message || 'Unknown error');\n        err.code = 'vault_error';\n        err.status = 402;\n        err.param = param;\n        throw err;\n      }\n      return intent;\n    },\n\n    async updateIntent(data) {\n      const intent = await vaultRequest('put', '/intent', data);\n      if (intent.errors) {\n        const param = Object.keys(intent.errors)[0];\n        const err = new Error(intent.errors[param].message || 'Unknown error');\n        err.code = 'vault_error';\n        err.status = 402;\n        err.param = param;\n        throw err;\n      }\n      return intent;\n    },\n\n    async authorizeGateway(data) {\n      const authorization = await vaultRequest('post', '/authorization', data);\n      if (authorization.errors) {\n        const param = Object.keys(authorization.errors)[0];\n        const err = new Error(\n          authorization.errors[param].message || 'Unknown error',\n        );\n        err.code = 'vault_error';\n        err.status = 402;\n        err.param = param;\n        throw err;\n      }\n      return authorization;\n    },\n  };\n}\n\nasync function render(request, cart, payMethods, params) {\n  if (params.card) {\n    if (!payMethods.card) {\n      console.error(\n        `Payment element error: credit card payments are disabled. See Payment settings in the Swell dashboard for details.`,\n      );\n    } else if (payMethods.card.gateway === 'braintree') {\n      if (!window.braintree) {\n        await loadScript(\n          'braintree-web',\n          'https://js.braintreegateway.com/web/3.57.0/js/client.min.js',\n        );\n      }\n      // TODO: implement braintree elements\n    } else if (payMethods.card.gateway === 'stripe') {\n      if (!window.Stripe) {\n        await loadScript('stripe-js', 'https://js.stripe.com/v3/');\n      }\n      await stripeElements(request, payMethods, params);\n    }\n  }\n  if (params.ideal) {\n    if (!payMethods.card) {\n      console.error(\n        `Payment element error: credit card payments are disabled. See Payment settings in the Swell dashboard for details.`,\n      );\n    } else if (!payMethods.ideal) {\n      console.error(\n        `Payment element error: iDEAL payments are disabled. See Payment settings in the Swell dashboard for details.`,\n      );\n    } else if (payMethods.card.gateway === 'stripe') {\n      if (!window.Stripe) {\n        await loadScript('stripe-js', 'https://js.stripe.com/v3/');\n      }\n      await stripeElements(request, payMethods, params);\n    }\n  }\n  if (params.paypal) {\n    if (!payMethods.paypal) {\n      console.error(\n        `Payment element error: PayPal payments are disabled. See Payment settings in the Swell dashboard for details.`,\n      );\n    } else if (\n      payMethods.card &&\n      payMethods.card.gateway === 'braintree' &&\n      payMethods.paypal.gateway === 'braintree'\n    ) {\n      if (!window.paypal) {\n        await loadScript(\n          'paypal-sdk',\n          `https://www.paypal.com/sdk/js?currency=${cart.currency}&client-id=${payMethods.paypal.client_id}&merchant-id=${payMethods.paypal.merchant_id}&vault=true`,\n        );\n      }\n      if (!window.braintree) {\n        await loadScript(\n          'braintree-web',\n          'https://js.braintreegateway.com/web/3.57.0/js/client.min.js',\n        );\n      }\n      if (window.braintree && !window.braintree.paypalCheckout) {\n        await loadScript(\n          'braintree-web-paypal-checkout',\n          'https://js.braintreegateway.com/web/3.57.0/js/paypal-checkout.min.js',\n        );\n      }\n      await braintreePayPalButton(request, cart, payMethods, params);\n    } else {\n      if (!window.paypal) {\n        await loadScript(\n          'paypal-sdk',\n          `https://www.paypal.com/sdk/js?currency=${cart.currency}&client-id=${payMethods.paypal.client_id}&merchant-id=${payMethods.paypal.merchant_id}&intent=authorize&commit=false`,\n        );\n      }\n      await payPalButton(request, cart, payMethods, params);\n    }\n  }\n}\n\nconst loadScript = async (id, src) => {\n  LOADING_SCRIPTS[id] =\n    LOADING_SCRIPTS[id] ||\n    new Promise((resolve) => {\n      const script = document.createElement('script');\n      script.id = id;\n      script.src = src;\n      script.async = true;\n      script.type = 'text/javascript';\n      script.addEventListener(\n        'load',\n        () => {\n          resolve();\n          LOADING_SCRIPTS[id] = null;\n        },\n        {\n          once: true,\n        },\n      );\n      document.head.appendChild(script);\n    });\n  return LOADING_SCRIPTS[id];\n};\n\nasync function stripeElements(request, payMethods, params) {\n  const { publishable_key } = payMethods.card;\n  const stripe = window.Stripe(publishable_key);\n  const elements = stripe.elements(params.config);\n  const createElement = (type) => {\n    const elementParams =\n      get(params, `card[${type}]`) || params.card || params.ideal;\n    const elementOptions = elementParams.options || {};\n    const element = elements.create(type, elementOptions);\n    element.mount(elementParams.elementId || `#${type}-element`);\n\n    elementParams.onChange && element.on('change', elementParams.onChange);\n    elementParams.onReady && element.on('ready', elementParams.onReady);\n    elementParams.onFocus && element.on('focus', elementParams.onFocus);\n    elementParams.onBlur && element.on('blur', elementParams.onBlur);\n    elementParams.onEscape && element.on('escape', elementParams.onEscape);\n    elementParams.onClick && element.on('click', elementParams.onClick);\n\n    if (type === 'card' || type === 'cardNumber' || type === 'idealBank') {\n      CARD_ELEMENTS.stripe = element;\n    }\n  };\n  API.stripe = stripe;\n\n  if (params.ideal) {\n    createElement('idealBank');\n  } else if (params.card.separateElements) {\n    createElement('cardNumber');\n    createElement('cardExpiry');\n    createElement('cardCvc');\n  } else {\n    createElement('card');\n  }\n}\n\n/**\n * Update cart email with paypal's when no email is present\n */\nexport async function shouldUsePayPalEmail(guest, request, options) {\n  // Only check if the email should be updated when the user is not logged in (guest user)\n  if (!guest) return false;\n\n  // Refetch to avoid stale data from the cart\n  const updatedCart = await cartApi(request, options).get();\n  const currentEmail = get(updatedCart, 'account.email');\n\n  // If no email is present, use paypal's email\n  if (!currentEmail) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nasync function payPalButton(request, cart, payMethods, params) {\n  const paypal = window.paypal;\n  const { paypal: { locale, style, elementId } = {} } = params;\n  const { capture_total, currency, guest } = cart;\n\n  const onError = (error) => {\n    const errorHandler = get(params, 'paypal.onError');\n    if (isFunction(errorHandler)) {\n      return errorHandler(error);\n    }\n    throw new Error(error.message);\n  };\n  const onSuccess = () => {\n    const successHandler = get(params, 'paypal.onSuccess');\n    return isFunction(successHandler) && successHandler();\n  };\n\n  if (!(capture_total > 0)) {\n    throw new Error(\n      'Invalid PayPal button amount. Value should be greater than zero.',\n    );\n  }\n\n  paypal\n    .Buttons(\n      {\n        locale: locale || 'en_US',\n        style: style || {\n          layout: 'horizontal',\n          height: 45,\n          color: 'gold',\n          shape: 'rect',\n          label: 'paypal',\n          tagline: false,\n        },\n        createOrder: (data, actions) =>\n          actions.order.create({\n            intent: 'AUTHORIZE',\n            purchase_units: [\n              {\n                amount: {\n                  value: +capture_total.toFixed(2),\n                  currency_code: currency,\n                },\n              },\n            ],\n          }),\n        onApprove: (data, actions) =>\n          actions.order\n            .get()\n            .then(async (order) => {\n              const orderId = order.id;\n              const payer = order.payer;\n              const shipping = get(order, 'purchase_units[0].shipping');\n\n              const usePayPalEmail = await shouldUsePayPalEmail(\n                guest,\n                request,\n                options,\n              );\n\n              return cartApi(request).update({\n                ...(usePayPalEmail && {\n                  account: {\n                    email: payer.email_address,\n                  },\n                }),\n                billing: {\n                  method: 'paypal',\n                  paypal: { order_id: orderId },\n                },\n                shipping: {\n                  name: shipping.name.full_name,\n                  address1: shipping.address.address_line_1,\n                  address2: shipping.address.address_line_2,\n                  state: shipping.address.admin_area_1,\n                  city: shipping.address.admin_area_2,\n                  zip: shipping.address.postal_code,\n                  country: shipping.address.country_code,\n                },\n              });\n            })\n            .then(onSuccess)\n            .catch(onError),\n      },\n      onError,\n    )\n    .render(elementId || '#paypal-button');\n}\n\nasync function braintreePayPalButton(request, cart, payMethods, params) {\n  const authorization = await vaultRequest('post', '/authorization', {\n    gateway: 'braintree',\n  });\n  if (authorization.error) {\n    throw new Error(authorization.error);\n  }\n  const braintree = window.braintree;\n  const paypal = window.paypal;\n  braintree.client\n    .create({\n      authorization,\n    })\n    .then((client) =>\n      braintree.paypalCheckout.create({\n        client,\n      }),\n    )\n    .then((paypalCheckoutInstance) => {\n      return paypal\n        .Buttons({\n          style: params.paypal.style || {},\n          createBillingAgreement: () =>\n            paypalCheckoutInstance.createPayment({\n              flow: 'vault',\n              currency: cart.currency,\n              amount: cart.grand_total,\n            }),\n          onApprove: (data, actions) =>\n            paypalCheckoutInstance\n              .tokenizePayment(data)\n              .then(({ nonce }) =>\n                cartApi(request, options).update({\n                  billing: { paypal: { nonce } },\n                }),\n              )\n              .then(\n                () =>\n                  isFunction(params.paypal.onSuccess) &&\n                  params.paypal.onSuccess(data, actions),\n              )\n              .catch(\n                isFunction(params.paypal.onError)\n                  ? params.paypal.onError\n                  : (err) => console.error('PayPal error', err),\n              ),\n          onCancel: isFunction(params.paypal.onCancel)\n            ? () => params.paypal.onCancel()\n            : () => console.log('PayPal payment cancelled'),\n          onError: isFunction(params.paypal.onError)\n            ? (err) => params.paypal.onError(err)\n            : (err) => console.error('PayPal error', err),\n        })\n        .render(params.paypal.elementId || '#paypal-button');\n    })\n    .catch(\n      isFunction(params.paypal.onError)\n        ? params.paypal.onError\n        : (err) => console.error('PayPal error', err),\n    );\n}\n\nasync function paymentTokenize(request, params, payMethods, cart) {\n  const { capture_total, auth_total } = cart;\n  const onError = (error) => {\n    const errorHandler =\n      get(params, 'card.onError') ||\n      get(params, 'ideal.onError') ||\n      get(params, 'klarna.onError') ||\n      get(params, 'bancontact.onError') ||\n      get(params, 'paysafecard.onError');\n    if (isFunction(errorHandler)) {\n      return errorHandler(error);\n    }\n    throw new Error(error.message);\n  };\n  const onSuccess = (result) => {\n    const successHandler =\n      get(params, 'card.onSuccess') || get(params, 'ideal.onSuccess');\n    if (isFunction(successHandler)) {\n      return successHandler(result);\n    }\n  };\n\n  if (!params) {\n    return onError({ message: 'Tokenization parameters not passed' });\n  }\n  if (params.card && payMethods.card) {\n    if (\n      payMethods.card.gateway === 'stripe' &&\n      CARD_ELEMENTS.stripe &&\n      API.stripe\n    ) {\n      const stripe = API.stripe;\n      const paymentMethod = await createPaymentMethod(\n        stripe,\n        CARD_ELEMENTS.stripe,\n        methods(request).authorizeGateway,\n        cart,\n      ).catch(onError);\n\n      if (!paymentMethod) {\n        return;\n      } else if (paymentMethod.error) {\n        return onError(paymentMethod.error);\n      } else if (capture_total < 1) {\n        // should save payment method data when payment amount is less than 1\n        // https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts\n        return cartApi(request, options)\n          .update({\n            billing: {\n              method: 'card',\n              card: paymentMethod,\n            },\n          })\n          .then(onSuccess)\n          .catch(onError);\n      }\n\n      const currency = toLower(get(cart, 'currency', 'usd'));\n      const amount = stripeAmountByCurrency(\n        currency,\n        capture_total + auth_total,\n      );\n      const stripeCustomer = get(cart, 'account.stripe_customer');\n      const intent = toSnake(\n        await methods(request)\n          .createIntent({\n            gateway: 'stripe',\n            intent: {\n              payment_method: paymentMethod.token,\n              amount,\n              currency,\n              capture_method: 'manual',\n              off_session: true,\n              confirm: true,\n              ...(stripeCustomer ? { customer: stripeCustomer } : {}),\n            },\n          })\n          .catch(onError),\n      );\n\n      if (intent && intent.status === 'requires_confirmation') {\n        const { paymentIntent, error } = await stripe.confirmCardPayment(\n          intent.client_secret,\n        );\n        return error\n          ? onError(error)\n          : await cartApi(request, options)\n              .update({\n                billing: {\n                  method: 'card',\n                  card: paymentMethod,\n                  intent: {\n                    stripe: {\n                      id: paymentIntent.id,\n                      ...(!!auth_total && {\n                        auth_amount: auth_total,\n                      }),\n                    },\n                  },\n                },\n              })\n              .then(onSuccess)\n              .catch(onError);\n      }\n    } else if (payMethods.card.gateway === 'quickpay') {\n      const intent = await createQuickpayPayment(\n        cart,\n        methods(request).createIntent,\n      ).catch(onError);\n      if (!intent) {\n        return;\n      } else if (intent.error) {\n        return onError(intent.error);\n      }\n\n      await cartApi(request, options).update({\n        billing: {\n          method: 'card',\n          intent: {\n            quickpay: {\n              id: intent,\n            },\n          },\n        },\n      });\n\n      createQuickpayCard(methods(request).authorizeGateway).catch(onError);\n    }\n  } else if (params.ideal && payMethods.ideal) {\n    if (\n      payMethods.card &&\n      payMethods.card.gateway === 'stripe' &&\n      CARD_ELEMENTS.stripe &&\n      API.stripe\n    ) {\n      const { error, paymentMethod } = await createIDealPaymentMethod(\n        API.stripe,\n        CARD_ELEMENTS.stripe,\n        cart,\n      );\n\n      if (error) {\n        return onError(error);\n      }\n\n      const currency = toLower(get(cart, 'currency', 'eur'));\n      const amount = stripeAmountByCurrency(currency, capture_total);\n      const intent = toSnake(\n        await methods(request)\n          .createIntent({\n            gateway: 'stripe',\n            intent: {\n              payment_method: paymentMethod.id,\n              amount,\n              currency,\n              payment_method_types: 'ideal',\n              confirmation_method: 'manual',\n              confirm: true,\n              return_url: window.location.href,\n            },\n          })\n          .catch(onError),\n      );\n\n      if (intent) {\n        await cartApi(request, options)\n          .update({\n            billing: {\n              method: 'ideal',\n              ideal: {\n                token: paymentMethod.id,\n              },\n              intent: { stripe: { id: intent.id } },\n            },\n          })\n          .catch(onError);\n\n        return (\n          (intent.status === 'requires_action' ||\n            intent.status === 'requires_source_action') &&\n          (await API.stripe.handleCardAction(intent.client_secret))\n        );\n      }\n    }\n  } else if (params.klarna && payMethods.klarna) {\n    if (payMethods.klarna.gateway === 'klarna') {\n      const session = await createKlarnaSession(\n        cart,\n        methods(request).createIntent,\n      ).catch(onError);\n      return session && window.location.replace(session.redirect_url);\n    } else if (payMethods.card && payMethods.card.gateway === 'stripe') {\n      if (!window.Stripe) {\n        await loadScript('stripe-js', 'https://js.stripe.com/v3/');\n      }\n      const { publishable_key } = payMethods.card;\n      const stripe = window.Stripe(publishable_key);\n      const settings = toSnake(await settingsApi(request, options).get());\n\n      const { error, source } = await createKlarnaSource(stripe, {\n        ...cart,\n        settings: settings.store,\n      });\n\n      return error\n        ? onError(error)\n        : cartApi(request, options)\n            .update({\n              billing: {\n                method: 'klarna',\n              },\n            })\n            .then(() => window.location.replace(source.redirect.url))\n            .catch(onError);\n    }\n  } else if (params.bancontact && payMethods.bancontact) {\n    if (payMethods.card && payMethods.card.gateway === 'stripe') {\n      if (!window.Stripe) {\n        await loadScript('stripe-js', 'https://js.stripe.com/v3/');\n      }\n      const { publishable_key } = payMethods.card;\n      const stripe = window.Stripe(publishable_key);\n\n      const { error, source } = await createBancontactSource(stripe, cart);\n\n      return error\n        ? onError(error)\n        : cartApi(request, options)\n            .update({\n              billing: {\n                method: 'bancontact',\n              },\n            })\n            .then(() => window.location.replace(source.redirect.url))\n            .catch(onError);\n    }\n  } else if (params.paysafecard && payMethods.paysafecard) {\n    const intent = await createPaysafecardPayment(\n      cart,\n      methods(request).createIntent,\n    ).catch(onError);\n    if (!intent) {\n      return;\n    }\n\n    await cartApi(request, options).update({\n      billing: {\n        method: 'paysafecard',\n        intent: {\n          paysafecard: {\n            id: intent.id,\n          },\n        },\n      },\n    });\n\n    return window.location.replace(intent.redirect.auth_url);\n  }\n}\n\nasync function handleRedirect(request, params, cart) {\n  const onError = (error) => {\n    const errorHandler =\n      get(params, 'card.onError') ||\n      get(params, 'paysafecard.onError') ||\n      get(params, 'klarna.onError');\n    if (isFunction(errorHandler)) {\n      return errorHandler(error);\n    }\n    throw new Error(error.message);\n  };\n  const onSuccess = (result) => {\n    const successHandler =\n      get(params, 'card.onSuccess') ||\n      get(params, 'paysafecard.onSuccess') ||\n      get(params, 'klarna.onSuccess');\n    if (isFunction(successHandler)) {\n      return successHandler(result);\n    }\n  };\n\n  const queryParams = getLocationParams(window.location);\n  removeUrlParams();\n  const { gateway } = queryParams;\n  let result;\n  if (gateway === 'quickpay') {\n    result = await handleQuickpayRedirectAction(\n      request,\n      cart,\n      params,\n      queryParams,\n    );\n  } else if (gateway === 'paysafecard') {\n    result = await handlePaysafecardRedirectAction(\n      request,\n      cart,\n      params,\n      queryParams,\n    );\n  } else if (gateway === 'klarna_direct') {\n    result = await handleDirectKlarnaRedirectAction(\n      request,\n      cart,\n      params,\n      queryParams,\n    );\n  }\n\n  if (!result) {\n    return;\n  } else if (result.error) {\n    return onError(result.error);\n  } else {\n    return onSuccess(result);\n  }\n}\n\nasync function handleQuickpayRedirectAction(\n  request,\n  cart,\n  params,\n  queryParams,\n) {\n  const { redirect_status: status, card_id: id } = queryParams;\n\n  switch (status) {\n    case 'succeeded':\n      const card = await getQuickpayCardDetais(\n        id,\n        methods(request).authorizeGateway,\n      );\n      if (!card) {\n        return;\n      } else if (card.error) {\n        return card;\n      } else {\n        await cartApi(request, options).update({\n          billing: {\n            method: 'card',\n            card,\n          },\n        });\n        return { success: true };\n      }\n    case 'canceled':\n      return {\n        error: {\n          message:\n            'We are unable to authenticate your payment method. Please choose a different payment method and try again.',\n        },\n      };\n    default:\n      return { error: { message: `Unknown redirect status: ${status}.` } };\n  }\n}\n\nasync function handlePaysafecardRedirectAction(request, cart) {\n  const paymentId = get(cart, 'billing.intent.paysafecard.id');\n  if (!paymentId) {\n    return {\n      error: {\n        message: 'Paysafecard payment ID not defined.',\n      },\n    };\n  }\n\n  const intent = await methods(request).updateIntent({\n    gateway: 'paysafecard',\n    intent: { payment_id: paymentId },\n  });\n\n  if (!intent) {\n    return;\n  }\n  switch (intent.status) {\n    case 'AUTHORIZED':\n      return { success: true };\n    case 'CANCELED_CUSTOMER':\n      return {\n        error: {\n          message:\n            'We are unable to authenticate your payment method. Please choose a different payment method and try again.',\n        },\n      };\n    default:\n      return {\n        error: { message: `Unknown redirect status: ${intent.status}.` },\n      };\n  }\n}\n\nasync function handleDirectKlarnaRedirectAction(\n  request,\n  cart,\n  params,\n  queryParams,\n) {\n  const { authorization_token } = queryParams;\n\n  if (!authorization_token) {\n    return {\n      error: {\n        message:\n          'We are unable to authenticate your payment method. Please choose a different payment method and try again.',\n      },\n    };\n  }\n\n  await cartApi(request, options).update({\n    billing: {\n      method: 'klarna',\n      klarna: {\n        token: authorization_token,\n      },\n    },\n  });\n  return { success: true };\n}\n\nasync function authenticate(request, payment, payMethods) {\n  const { method, gateway } = payment;\n  if (method === 'card') {\n    const cardMethod = payMethods.card;\n    if (!cardMethod) {\n      console.error(\n        `Authenticate error: credit card payments are disabled. See Payment settings in the Swell dashboard for details.`,\n      );\n    } else if (gateway === 'stripe' && cardMethod.gateway === 'stripe') {\n      if (!window.Stripe) {\n        await loadScript('stripe-js', 'https://js.stripe.com/v3/');\n      }\n      return authenticateStripeCard(request, payment, payMethods);\n    }\n  }\n}\n\nasync function authenticateStripeCard(request, payment, payMethods) {\n  const { transaction_id: id, card: { token } = {} } = payment;\n  const { publishable_key } = payMethods.card;\n  const intent = await methods(request, options)\n    .updateIntent({\n      gateway: 'stripe',\n      intent: { id, payment_method: token },\n    })\n    .catch((error) => ({\n      error,\n    }));\n  if (intent.error) {\n    return intent;\n  }\n  const stripe = window.Stripe(publishable_key);\n  const actionResult = await stripe.confirmCardPayment(intent.client_secret);\n  return actionResult.error\n    ? {\n        error: {\n          message: actionResult.error.message,\n          code: actionResult.error.code,\n        },\n      }\n    : { status: actionResult.status };\n}\n\nexport default methods;\n","import { find } from './utils';\nimport { getCookie, setCookie } from './cookie';\n\nfunction methods(request, opt) {\n  return {\n    code: null,\n    state: null,\n\n    list() {\n      return opt.api.settings.get('store.locales', []);\n    },\n\n    async select(locale) {\n      this.set(locale);\n      setCookie('swell-locale', locale);\n      opt.api.settings.locale = locale;\n      return await request('put', '/session', { locale });\n    },\n\n    selected() {\n      if (this.code) {\n        return this.code;\n      }\n      const storeLocale = opt.api.settings.getStoreLocale();\n      const cookieLocale = getCookie('swell-locale');\n      opt.api.settings.locale = cookieLocale || storeLocale;\n      return cookieLocale || storeLocale;\n    },\n\n    get() {\n      if (!this.code) {\n        this.code = this.selected();\n      }\n      if (!this.state) {\n        this.state = this.set(this.code);\n      }\n      return this.state;\n    },\n\n    set(code) {\n      this.code = code;\n      this.state = find(this.list(), { code }) || {};\n      return this.state;\n    },\n  };\n}\n\nexport default methods;\n","import { get, find, round } from './utils';\nimport { getCookie, setCookie } from './cookie';\n\nconst FORMATTERS = {};\n\nfunction methods(request, opt) {\n  return {\n    code: null,\n    state: null,\n    locale: null,\n\n    list() {\n      return opt.api.settings.get('store.currencies', []);\n    },\n\n    async select(currency) {\n      this.set(currency);\n\n      return request('put', '/session', { currency });\n    },\n\n    selected() {\n      if (!this.code) {\n        this.set(\n          getCookie('swell-currency') || opt.api.settings.get('store.currency'),\n        );\n      }\n\n      return this.code;\n    },\n\n    get() {\n      if (!this.code) {\n        this.code = this.selected();\n      }\n      if (!this.state) {\n        this.state = this.set(this.code);\n      }\n      return this.state;\n    },\n\n    set(code = 'USD') {\n      this.code = code;\n      this.state = find(this.list(), { code }) || { code };\n\n      this.locale = String(\n        opt.api.settings.get(\n          'store.locale',\n          typeof navigator === 'object' ? navigator.language : 'en-US',\n        ),\n      );\n\n      setCookie('swell-currency', code);\n\n      return this.state;\n    },\n\n    format(amount, params = {}) {\n      let state = this.get();\n      if (params.code && params.code !== state.code) {\n        const list = this.list();\n        state = find(list, { code: params.code }) || { code: params.code };\n      }\n\n      const { code = 'USD', type, decimals, rate } = state;\n      const formatCode = params.code || code;\n      const formatRate = params.rate || rate;\n      const formatLocale = params.locale || this.locale;\n      const formatDecimals =\n        typeof params.decimals === 'number' ? params.decimals : decimals;\n      const { convert = true } = params;\n\n      let formatAmount = amount;\n      if (\n        convert &&\n        (type === 'display' || params.rate) &&\n        typeof formatAmount === 'number' &&\n        typeof formatRate === 'number'\n      ) {\n        // Convert the price currency into the display currency\n        formatAmount = this.applyRounding(amount * formatRate, state);\n      }\n\n      const formatter = this.formatter({\n        code: formatCode,\n        locale: formatLocale,\n        decimals: formatDecimals,\n      });\n      try {\n        if (typeof formatAmount === 'number') {\n          return formatter.format(formatAmount);\n        } else {\n          // Otherwise return the currency symbol only, falling back to '$'\n          const symbol = get(formatter.formatToParts(0), '0.value', '$');\n          return symbol !== formatCode ? symbol : '';\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n\n      return String(amount);\n    },\n\n    formatter({ code, locale, decimals }) {\n      locale = String(locale || '').replace('_', '-');\n\n      const key = [code, locale, decimals].join('|');\n\n      if (FORMATTERS[key]) {\n        return FORMATTERS[key];\n      }\n\n      const formatLocales = [];\n\n      if (locale) {\n        formatLocales.push(locale);\n      }\n\n      formatLocales.push('en-US');\n\n      const formatDecimals =\n        typeof decimals === 'number' ? decimals : undefined;\n\n      const props = {\n        style: 'currency',\n        currency: code,\n        currencyDisplay: 'symbol',\n        minimumFractionDigits: formatDecimals,\n        maximumFractionDigits: formatDecimals,\n      };\n\n      try {\n        try {\n          FORMATTERS[key] = new Intl.NumberFormat(formatLocales, props);\n        } catch (err) {\n          if (err.message.indexOf('Invalid language tag') >= 0) {\n            FORMATTERS[key] = new Intl.NumberFormat('en-US', props);\n          }\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n\n      return FORMATTERS[key];\n    },\n\n    applyRounding(value, config) {\n      if (!config || !config.round) {\n        return value;\n      }\n\n      const scale = config.decimals;\n      const fraction =\n        config.round_interval === 'fraction' ? config.round_fraction || 0 : 0;\n\n      let roundValue = ~~value;\n      let decimalValue = this.round(value, scale);\n\n      if (decimalValue === fraction) {\n        return roundValue + decimalValue;\n      }\n\n      const diff = this.round(decimalValue - fraction, 1);\n      const direction =\n        config.round === 'nearest'\n          ? diff > 0\n            ? diff >= 0.5\n              ? 'up'\n              : 'down'\n            : diff <= -0.5\n            ? 'down'\n            : 'up'\n          : config.round;\n\n      switch (direction) {\n        case 'down':\n          roundValue =\n            roundValue + fraction - (decimalValue > fraction ? 0 : 1);\n          break;\n        case 'up':\n        default:\n          roundValue =\n            roundValue + fraction + (decimalValue > fraction ? 1 : 0);\n          break;\n      }\n\n      return this.round(roundValue, scale);\n    },\n\n    round,\n  };\n}\n\nexport default methods;\n","import 'isomorphic-unfetch';\n\nimport card from './card';\nimport { getCookie, setCookie } from './cookie';\nimport cache from './cache';\nimport cart from './cart';\nimport account from './account';\nimport products from './products';\nimport categories from './categories';\nimport attributes from './attributes';\nimport subscriptions from './subscriptions';\nimport content from './content';\nimport settings from './settings';\nimport payment from './payment';\nimport locale from './locale';\nimport currency from './currency';\nimport * as utils from './utils';\n\nconst options = {\n  store: null,\n  key: null,\n  url: null,\n  useCamelCase: null,\n  previewContent: null,\n};\n\nconst api = {\n  version: '__VERSION__',\n  options,\n  request,\n\n  init(store, key, opt = {}) {\n    options.key = key;\n    options.store = store;\n    options.url = opt.url\n      ? utils.trimEnd(opt.url)\n      : `https://${store}.swell.store`;\n    options.vaultUrl = opt.vaultUrl\n      ? utils.trimEnd(opt.vaultUrl)\n      : `https://vault.schema.io`;\n    options.timeout = (opt.timeout && parseInt(opt.timeout, 10)) || 20000;\n    options.useCamelCase = opt.useCamelCase || false;\n    options.previewContent = opt.previewContent || false;\n    options.session = opt.session;\n    options.locale = opt.locale;\n    options.currency = opt.currency;\n    options.api = api;\n    utils.setOptions(options);\n  },\n\n  // Backward compatibility\n  auth(...args) {\n    return this.init(...args);\n  },\n\n  get(url, query) {\n    return request('get', url, query);\n  },\n\n  put(url, data) {\n    return request('put', url, data);\n  },\n\n  post(url, data) {\n    return request('post', url, data);\n  },\n\n  delete(url, data) {\n    return request('delete', url, data);\n  },\n\n  cache,\n\n  card,\n\n  cart: cart(request, options),\n\n  account: account(request, options),\n\n  products: products(request, options),\n\n  categories: categories(request, options),\n\n  attributes: attributes(request, options),\n\n  subscriptions: subscriptions(request, options),\n\n  content: content(request, options),\n\n  settings: settings(request, options),\n\n  payment: payment(request, options),\n\n  locale: locale(request, options),\n\n  currency: currency(request, options),\n\n  utils,\n};\n\nasync function request(\n  method,\n  url,\n  id = undefined,\n  data = undefined,\n  opt = undefined,\n) {\n  const allOptions = {\n    ...options,\n    ...opt,\n  };\n\n  const session = allOptions.session || getCookie('swell-session');\n  const locale = allOptions.locale || getCookie('swell-locale');\n  const currency = allOptions.currency || getCookie('swell-currency');\n\n  const baseUrl = `${allOptions.url}${allOptions.base || ''}/api`;\n  const reqMethod = String(method).toLowerCase();\n\n  let reqUrl = url;\n  let reqData = id;\n\n  if (data !== undefined || typeof id === 'string') {\n    reqUrl = [utils.trimEnd(url), utils.trimStart(id)].join('/');\n    reqData = data;\n  }\n\n  reqUrl = allOptions.fullUrl || `${baseUrl}/${utils.trimBoth(reqUrl)}`;\n  reqData = allOptions.useCamelCase ? utils.toSnake(reqData) : reqData;\n\n  let reqBody;\n  if (reqMethod === 'get') {\n    let exQuery;\n    [reqUrl, exQuery] = reqUrl.split('?');\n    const fullQuery = [exQuery, utils.stringifyQuery(reqData)]\n      .join('&')\n      .replace(/^&/, '');\n    reqUrl = `${reqUrl}${fullQuery ? `?${fullQuery}` : ''}`;\n  } else {\n    reqBody = JSON.stringify(reqData);\n  }\n\n  const reqHeaders = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Basic ${utils.base64Encode(String(allOptions.key))}`,\n  };\n\n  if (session) {\n    reqHeaders['X-Session'] = session;\n  }\n\n  if (locale) {\n    reqHeaders['X-Locale'] = locale;\n  }\n\n  if (currency) {\n    reqHeaders['X-Currency'] = currency;\n  }\n\n  const response = await fetch(reqUrl, {\n    method: reqMethod,\n    headers: reqHeaders,\n    body: reqBody,\n    credentials: 'include',\n    mode: 'cors',\n  });\n\n  const responseSession = response.headers.get('X-Session');\n\n  if (typeof responseSession === 'string' && session !== responseSession) {\n    setCookie('swell-session', responseSession);\n  }\n\n  const result = await response.json();\n\n  if (result && result.error) {\n    const err = new Error(result.error.message);\n    err.status = response.status;\n    err.code = result.error.code;\n    err.param = result.error.param;\n    throw err;\n  } else if (!response.ok) {\n    const err = new Error(\n      'A connection error occurred while making the request',\n    );\n    err.code = 'connection_error';\n    throw err;\n  }\n\n  return options.useCamelCase ? utils.toCamel(result) : result;\n}\n\nexport default api;\n"],"names":["options","deepmerge","normalizeKeys","camelCase","snakeCase","stringify","key","param","__spreadValues","set","get","methods","cache","acc","__spreadProps","isEqual","find","attributesApi","uniq","handler","cloneDeep","state","localeKeys","addressFieldsMap","isEmpty","toLower","map","toNumber","billingFieldsMap","data","reduce","cartApi","settingsApi","result","round","utils.trimEnd","utils.setOptions","card","cart","account","products","categories","attributes","subscriptions","content","settings","payment","locale","currency","utils.trimStart","utils.trimBoth","utils.toSnake","utils.stringifyQuery","utils.base64Encode","utils.toCamel"],"mappings":"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"}